#!/usr/bin/env python2
# vim:fileencoding=utf-8

from __future__ import (
    unicode_literals,
    division,
    absolute_import,
    print_function
)
from calibre.web.feeds.news import BasicNewsRecipe
import datetime
from dateutil import relativedelta
from dateutil.tz import tzutc


class TheEconomistRecipe(BasicNewsRecipe):
    """
    Keep in mind that if you run this recipe on a Thursday
    before 21:00:00+00, you will not get all the full accurate
    data.  This is just due to how the RSS feeds and content are
    structured.
    """
    title = "The Economist"
    oldest_article = 13
    max_articles_per_feed = 200
    auto_cleanup = True
    use_embedded_content = False
    publication_type = "magazine"
    needs_subscription = True
    handle_gzip = True
    timefmt = ""

    x_exclude_datefilter = []

    x_feeds = [
        (
            "The World This Week",
            "https://www.economist.com/rss/the_world_this_week_rss.xml"
        ),
        (
            "Leaders",
            "https://www.economist.com/feeds/print-sections/69/leaders.xml"
        ),
        (
            "Letters",
            "https://www.economist.com/feeds/print-sections/68/letters.xml"
        ),
        (
            "Briefings",
            "https://www.economist.com/feeds/print-sections/102/briefings2.xml"
        ),
        (
            "Special Reports",
            "https://www.economist.com/"
            "feeds/print-sections/103/special-reports.xml"
        ),
        (
            "United States",
            "https://www.economist.com/"
            "feeds/print-sections/71/united-states.xml"
        ),
        (
            "Britain",
            "https://www.economist.com/feeds/print-sections/76/britain.xml"
        ),
        (
            "Europe",
            "https://www.economist.com/feeds/print-sections/75/europe.xml"
        ),
        (
            "The Americas",
            "https://www.economist.com/"
            "feeds/print-sections/72/the-americas.xml"
        ),
        (
            "Middle East and Africa",
            "https://www.economist.com/"
            "feeds/print-sections/99/middle-east-africa.xml"
        ),
        (
            "Asia",
            "https://www.economist.com/feeds/print-sections/73/asia.xml"
        ),
        (
            "China",
            "https://www.economist.com/feeds/print-sections/77729/china.xml"
        ),
        (
            "International",
            "https://www.economist.com/"
            "feeds/print-sections/74/international.xml"
        ),
        (
            "Business",
            "https://www.economist.com/feeds/print-sections/77/business.xml"
        ),
        (
            "Finance and Economica",
            "https://www.economist.com/"
            "feeds/print-sections/79/finance-and-economics.xml"
        ),
        (
            "Science and Technology",
            "https://www.economist.com/"
            "feeds/print-sections/80/science-and-technology.xml"
        )
    ]

    def get_feeds(self):
        return self.x_feeds

    def get_issue_date_avail(self):
        morning = (
            datetime.datetime.utcnow().replace(
                hour=0,
                minute=0,
                second=0,
                microsecond=0,
                tzinfo=tzutc()
            )
        )
        thursrel = relativedelta.relativedelta(weekday=relativedelta.TH(-1))
        closest_thurs = (morning + thursrel)
        availdt = datetime.datetime(
            year=closest_thurs.year,
            month=closest_thurs.month,
            day=closest_thurs.day,
            hour=21,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo=tzutc()
        )
        nowdt = datetime.datetime.utcnow().replace(tzinfo=tzutc())
        if nowdt >= availdt:
            return availdt
        offset_num = (
            -2
            if (nowdt.weekday() == 3)
            else -1
        )
        last_thurs = (
            relativedelta.relativedelta(weekday=relativedelta.TH(offset_num))
        )
        newdt = (availdt + last_thurs)
        return newdt

    def get_issue_date_publish(self):
        avail = self.get_issue_date_avail()
        offset = datetime.timedelta(days=1)
        fri = (avail + offset)
        newdt = datetime.datetime(
            year=fri.year,
            month=fri.month,
            day=fri.day,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo=tzutc()
        )
        return newdt

    def get_issue_date_cover(self):
        """
        Get the date for the cover
        """
        pubdt = self.get_issue_date_publish()
        offset = datetime.timedelta(days=1)
        sat = (pubdt + offset)
        return sat

    def get_articles_date_start(self):
        avail = self.get_issue_date_avail()
        offset = datetime.timedelta(days=5)
        sat = (avail - offset)
        newdt = datetime.datetime(
            year=sat.year,
            month=sat.month,
            day=sat.day,
            hour=0,
            minute=0,
            second=0,
            microsecond=0,
            tzinfo=tzutc()
        )
        return newdt

    def get_articles_date_end(self):
        newdt = self.get_issue_date_avail()
        return newdt

    def get_cover_url(self):
        root = (
            "https://cdn.static-economist.com/"
            "sites/default/files/imagecache/"
            "print-cover-full/print-covers/{date}_cuk400.jpg"
        )
        pubdt = self.get_issue_date_cover()
        #print("PUBDT: %s" % pubdt.isoformat())
        dt_str = pubdt.strftime("%Y%m%d")
        url = root.format(date=dt_str)
        return url

    def parse_feeds(self):
        exclude_filt = frozenset(self.x_exclude_datefilter)
        arts_date_start = self.get_articles_date_start()
        arts_date_end = self.get_articles_date_end()
        #print("ARTSSTART: %s" % arts_date_start.isoformat())
        #print("ARTSDATEEND: %s" % arts_date_end.isoformat())

        def filt_articles(article):
            artdt = datetime.datetime(*article.date[:6]).replace(tzinfo=tzutc())
            ret = (
                (artdt >= arts_date_start) and
                (artdt < arts_date_end)
            )
            return ret

        def map_feeds(feed):
            if feed.title not in exclude_filt:
                feed.articles = filter(filt_articles, feed.articles)
            return feed

        feeds_orig = BasicNewsRecipe.parse_feeds(self)
        feeds = map(map_feeds, feeds_orig)
        return feeds
