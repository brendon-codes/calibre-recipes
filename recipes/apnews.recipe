#!/usr/bin/env python2
# vim:fileencoding=utf-8
# License: GPLv3 Copyright: 2017, Kovid Goyal <kovid at kovidgoyal.net>

from __future__ import (
    absolute_import,
    division,
    print_function,
    unicode_literals
)

import json

from calibre.web.feeds.news import BasicNewsRecipe


class AssociatedPress(BasicNewsRecipe):
    title = u"Associated Press"
    description = u"Associated Press"
    use_embedded_content = False
    language = u"en"
    encoding = u"utf-8"
    no_stylesheets = True
    ignore_duplicate_articles = {u"url"}
    remove_empty_feeds = False
    timefmt = u""
    publication_type = "newspaper"

    FEED_TAGS = [
        ("politics", "Politics"),
        ("usnews", "U.S."),
        ("intlnews", "World")
    ]
    FEED_BASE_URL = (
        u"https://afs-prod.appspot.com/api/v2/feed/tag?tags=apf-%(CODE)s"
    )
    ARTICLES_LIMIT = 4
    ARTICLE_BASE_URL = (
        u"https://apnews.com/%(ID)s"
    )

    def parse_index(self):
        mapper = lambda x: (x[1], self.parse_section(x[0]))
        feeds = map(mapper, self.FEED_TAGS)
        return feeds

    def parse_article(self, card):
        article_id = card.get(u"shortId", None)
        if article_id is None:
            return None
        article_url = self.ARTICLE_BASE_URL % {u"ID": article_id}
        contents = card.get(u"contents", None)
        if contents is None:
            return None
        if len(contents) == 0:
            return None
        row = contents[0]
        title = row.get(u"headline", None)
        if title is None:
            return None
        article = {
            u"url": article_url,
            u"title": title
        }
        return article

    def parse_section(self, code):
        url = self.FEED_BASE_URL % {u"CODE": code}
        self.log(u"Processing section:", code, u"at", url)
        data = self.index_to_soup(url, raw=True)
        obj = json.loads(data)
        cards = obj.get(u"cards", [])[:self.ARTICLES_LIMIT]
        first_pass_articles = map(self.parse_article, cards)
        articles = filter((lambda x: x is not None), first_pass_articles)
        return articles
